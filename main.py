import asyncio
import aiosqlite
import requests
from datetime import datetime, timedelta
import pytz
import csv
from io import BytesIO
import CFG

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, CallbackQuery
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

API_TOKEN = CFG.API_TOKEN
WEATHER_API_KEY = CFG.WEATHER_API_KEY
ADMIN_ID = CFG.ADMIN_ID
DATABASE = "bot_db.sqlite"
LOG_CHANNEL_ID = CFG.LOG_CHANNEL_ID

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)


# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø FSM ====================
class FeedbackStates(StatesGroup):
    waiting_for_q1 = State()
    waiting_for_q2 = State()
    waiting_for_q3 = State()


# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞", callback_data="cmd_time")],
        [InlineKeyboardButton(text="üå¶ –ü–æ–≥–æ–¥–∞ –≥–æ—Ä–æ–¥–∞", callback_data="cmd_weather")],
        [InlineKeyboardButton(text="üìö –í–∏–∫–∏–ø–µ–¥–∏—è", callback_data="cmd_wiki")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="cmd_help")]
    ])


def get_rating_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1", callback_data="rate_1"),
            InlineKeyboardButton(text="2", callback_data="rate_2"),
            InlineKeyboardButton(text="3", callback_data="rate_3"),
            InlineKeyboardButton(text="4", callback_data="rate_4"),
            InlineKeyboardButton(text="5", callback_data="rate_5"),
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_feedback")]
    ])


# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS blacklist (
                user_id INTEGER PRIMARY KEY,
                reason TEXT,
                until TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                reg_time TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS feedback (
                user_id INTEGER,
                q1 INTEGER,
                q2 INTEGER,
                q3 INTEGER,
                timestamp TEXT
            )
        ''')
        await db.commit()


async def is_user_blocked(user_id: int) -> tuple[bool, str, str]:
    async with aiosqlite.connect(DATABASE) as db:
        async with db.execute('SELECT reason, until FROM blacklist WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                reason, until = row
                if until:
                    until_dt = datetime.strptime(until, "%Y-%m-%d %H:%M:%S")
                    if datetime.now() > until_dt:
                        await db.execute('DELETE FROM blacklist WHERE user_id = ?', (user_id,))
                        await db.commit()
                        return False, "", ""
                return True, reason or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞", until or "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
            return False, "", ""


async def save_user(user: types.User):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, reg_time)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        await db.commit()


async def save_feedback(user_id: int, data: dict):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('''
            INSERT INTO feedback (user_id, q1, q2, q3, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, data['q1'], data['q2'], data['q3'], datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        await db.commit()


async def get_all_users() -> list[int]:
    async with aiosqlite.connect(DATABASE) as db:
        async with db.execute('SELECT user_id FROM users') as cursor:
            return [row[0] async for row in cursor]


async def get_all_users_info():
    async with aiosqlite.connect(DATABASE) as db:
        async with db.execute('SELECT user_id, username, first_name, reg_time FROM users') as cursor:
            return await cursor.fetchall()


async def get_all_blocks():
    async with aiosqlite.connect(DATABASE) as db:
        async with db.execute('SELECT user_id, reason, until FROM blacklist') as cursor:
            return await cursor.fetchall()


async def block_user(user_id: int, reason: str = "", minutes: int = 0):
    until = None
    if minutes > 0:
        until = (datetime.now() + timedelta(minutes=minutes)).strftime("%Y-%m-%d %H:%M:%S")
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('''
            INSERT OR REPLACE INTO blacklist (user_id, reason, until)
            VALUES (?, ?, ?)
        ''', (user_id, reason, until))
        await db.commit()
    try:
        msg = f"‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
        if until:
            msg += f"\n–î–æ: {until}"
        await bot.send_message(user_id, msg)

    except:
        pass


async def unblock_user(user_id: int):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute('DELETE FROM blacklist WHERE user_id = ?', (user_id,))
        await db.commit()


# ==================== –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ ====================
@router.message(Command("feedback"))
async def cmd_feedback(message: types.Message, state: FSMContext):
    blocked, reason, until = await is_user_blocked(message.from_user.id)
    if blocked:
        return await message.answer(f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}\n–î–æ: {until}")

    await state.set_state(FeedbackStates.waiting_for_q1)
    await message.answer(
        "üìù –û—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ (1-5):\n\n1. –£–¥–æ–±—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        reply_markup=get_rating_keyboard()
    )


@router.callback_query(F.data == "cmd_time")
async def button_time(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /time [—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å]")
    await callback.answer()


@router.callback_query(F.data == "cmd_weather")
async def button_weather(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /weather [–≥–æ—Ä–æ–¥]")
    await callback.answer()


@router.callback_query(F.data == "cmd_wiki")
async def button_wiki(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /wiki [–∑–∞–ø—Ä–æ—Å]")
    await callback.answer()


@router.callback_query(F.data == "cmd_help")
async def button_help(callback: CallbackQuery):
    await cmd_help(callback.message)
    await callback.answer()


@router.callback_query(F.data.startswith("rate_"), FeedbackStates.waiting_for_q1)
async def process_q1(callback: CallbackQuery, state: FSMContext):
    rate = int(callback.data.split("_")[1])
    await state.update_data(q1=rate)
    await state.set_state(FeedbackStates.waiting_for_q2)
    await callback.message.edit_text(
        "2. –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞:",
        reply_markup=get_rating_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("rate_"), FeedbackStates.waiting_for_q2)
async def process_q2(callback: CallbackQuery, state: FSMContext):
    rate = int(callback.data.split("_")[1])
    await state.update_data(q2=rate)
    await state.set_state(FeedbackStates.waiting_for_q3)
    await callback.message.edit_text(
        "3. –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞:",
        reply_markup=get_rating_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("rate_"), FeedbackStates.waiting_for_q3)
async def process_q3(callback: CallbackQuery, state: FSMContext):
    rate = int(callback.data.split("_")[1])
    data = await state.update_data(q3=rate)
    await state.clear()

    await save_feedback(callback.from_user.id, data)

    feedback_text = (
        "üìä <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. </b>\n\n"
        f"1. –£–¥–æ–±—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {data['q1']}/5\n"
        f"2. –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {data['q2']}/5\n"
        f"3. –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {data['q3']}/5"
    )
    await callback.message.edit_text(feedback_text)
    await callback.answer()

    admin_msg = (
        "üîî <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n\n"
        f"üë§ ID: <code>{callback.from_user.id}</code>\n"
        f"üîπ –£–¥–æ–±—Å—Ç–≤–æ: {data['q1']}/5\n"
        f"üîπ –¢–æ—á–Ω–æ—Å—Ç—å: {data['q2']}/5\n"
        f"üîπ –°–∫–æ—Ä–æ—Å—Ç—å: {data['q3']}/5"
    )
    await bot.send_message(ADMIN_ID, admin_msg)


@router.callback_query(F.data == "cancel_feedback")
async def cancel_feedback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
    await callback.answer()


@router.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        return
    await state.clear()
    await message.answer("‚ùå –û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.")


@router.message(FeedbackStates.waiting_for_q1)
@router.message(FeedbackStates.waiting_for_q2)
@router.message(FeedbackStates.waiting_for_q3)
async def handle_wrong_input(message: types.Message):
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (1-5).")


# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    blocked, reason, until = await is_user_blocked(message.from_user.id)
    if blocked:
        return await message.answer(f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–î–æ: {until}")
    await save_user(message.from_user)
    await message.answer("üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!!! –Ø ‚Äì —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫! –§—É–Ω–∫—Ü–∏–∏:",
                         reply_markup=main_keyboard())


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "‚úÖ /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚úÖ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚úÖ /weather [–≥–æ—Ä–æ–¥] ‚Äî –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ\n"
        "‚úÖ /time [—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å] ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≥–æ—Ä–æ–¥–µ\n"
        "‚úÖ /wiki [–∑–∞–ø—Ä–æ—Å] ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏\n"
        "‚úÖ /feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ\n"
        "üö´ /broadcast [—Ç–µ–∫—Å—Ç] ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞\n"
        "üö´ /get_stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üö´ /block [user_id] [–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞] ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üö´ /unblock [user_id] ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    await message.answer(help_text)


# ==================== –ü–û–ì–û–î–ê ====================
@router.message(Command("weather"))
async def cmd_weather(message: types.Message):
    blocked, reason, until = await is_user_blocked(message.from_user.id)
    if blocked:
        return await message.answer(f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}\n–î–æ: {until}")
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /weather <–≥–æ—Ä–æ–¥>")
    city = args[1]
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        temp = data["main"]["temp"]
        desc = data["weather"][0]["description"]
        await message.answer(f"üå° –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ <b>{city}</b>: {temp}¬∞C, {desc}")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")


# ==================== –í–†–ï–ú–Ø ====================
@router.message(Command("time"))
async def cmd_time(message: types.Message):
    blocked, reason, until = await is_user_blocked(message.from_user.id)
    if blocked:
        return await message.answer(f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}\n–î–æ: {until}")
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /time <–≥–æ—Ä–æ–¥>")
    city = args[1]
    matches = [tz for tz in pytz.all_timezones if city.lower() in tz.lower()]
    if not matches:
        return await message.answer(
            "‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
    tz = pytz.timezone(matches[0])
    current_time = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')
    await message.answer(f"‚è∞ –í—Ä–µ–º—è –≤ –ø–æ—è—Å–µ <b>{matches[0]}</b>: {current_time}")


# -----------------------


# === –ê–¥–º–∏–Ω-–º–µ–Ω—é: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ===
@router.message(Command("admin_menu_t"))
async def admin_menu(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /block USER_ID")


@router.message(Command("block_t"))
async def block_user_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block 123456789")
    user_id = int(parts[1])
    await block_user(user_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (CSV) ===
@router.message(Command("get_stats_t"))
async def get_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    users = await get_all_users()
    buffer = BytesIO()
    writer = csv.writer(buffer)
    writer.writerow(["User ID"])
    for uid in users:
        writer.writerow([uid])
    buffer.seek(0)
    await message.answer_document(InputFile(buffer, filename="user_stats.csv"))


# -----------------------


# ==================== –í–ò–ö–ò–ü–ï–î–ò–Ø ====================
@router.message(Command("wiki"))
async def search_wiki(message: types.Message):
    blocked, reason, until = await is_user_blocked(message.from_user.id)
    if blocked:
        return await message.answer(f"‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}\n–î–æ: {until}")
    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wiki <—Å–ª–æ–≤–æ>")
    query = args[1]
    response = requests.get(f"https://ru.wikipedia.org/api/rest_v1/page/summary/{query}")
    if response.status_code == 200:
        data = response.json()
        title = data.get("title", query)
        extract = data.get("extract", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")
        await message.answer(f"<b>{title}</b>\n\n{extract}")
    else:
        await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# ==================== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ====================
@router.message(Command("block"))
async def cmd_block(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    parts = message.text.split(maxsplit=3)
    if len(parts) < 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <user_id> [–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞]")
    try:
        user_id = int(parts[1])
        minutes = int(parts[2]) if len(parts) > 2 and parts[2].isdigit() else 0
        reason = parts[3] if len(parts) > 3 else ""
        await block_user(user_id, reason, minutes)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω{' –Ω–∞ ' + str(minutes) + ' –º–∏–Ω—É—Ç' if minutes else ''}. –ü—Ä–∏—á–∏–Ω–∞: "
            f"{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")


@router.message(Command("unblock"))
async def cmd_unblock(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    parts = message.text.split()
    if len(parts) != 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock <user_id>")
    try:
        user_id = int(parts[1])
        await unblock_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")


@router.message(Command("broadcast"))
async def broadcast(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
    text = parts[1]
    users = await get_all_users()
    count = 0
    for uid in users:
        blocked, *_ = await is_user_blocked(uid)
        if not blocked:
            try:
                await bot.send_message(uid, f"üì¢ {text}")
                count += 1
            except:
                pass
    await message.answer(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.message(Command("get_stats"))
async def get_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    users = await get_all_users_info()
    blocks = await get_all_blocks()
    text = "<b>üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for uid, uname, fname, reg in users:
        text += f"ID: <code>{uid}</code>\n–ò–º—è: {fname or '-'}\nUsername: @{uname or '-'}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg}\n\n"
    if blocks:
        text += "<b>üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:</b>\n\n"
        for uid, reason, until in blocks:
            text += f"ID: <code>{uid}</code>\n–ü—Ä–∏—á–∏–Ω–∞: {reason or '‚Äî'}\n–î–æ: {until or '–±–µ—Å—Å—Ä–æ—á–Ω–æ'}\n\n"
    await message.answer(text)


# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================
async def log_message(message: types.Message):
    try:
        sender = message.from_user
        log_text = (
            f"üïí <b>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</b>\n"
            f"üë§ <b>–û—Ç:</b> {sender.full_name} (@{sender.username or '‚Äî'})\n"
            f"üÜî <b>ID:</b> {sender.id}\n"
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message.text or '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}"
        )
        await bot.send_message(LOG_CHANNEL_ID, log_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@router.message()
async def catch_all(message: types.Message):
    await log_message(message)


# ==================== –ó–ê–ü–£–°–ö ====================
async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
